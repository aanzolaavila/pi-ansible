- name: Configure user for configs
  user:
    name: homeserver
    password: "homeserver"
    groups:
      - docker
    state: present
    shell: /bin/bash
    uid: 1001
    system: no
    createhome: yes

- name: Create loop filesystems
  block:
    - name: Check that the /mnt/hdd/raspifs/drive exists
      stat:
        path: /mnt/hdd/raspifs/drive
        get_checksum: false
        get_mime: false
      register: stat_result

    - name: Create the file, if it doesnt exist already
      shell: |
        touch drive
        dd if=/dev/zero of=drive bs=1024 count=5000000 # ~5GB
        mkfs.ext3 drive
      args:
        chdir: /mnt/ssd/raspifs
        executable: /bin/bash
      when: not stat_result.stat.exists

- name: Mount loop filesystems
  block:
    - name: ensure config directory exists
      file:
        path: /home/homeserver/.config
        state: directory

    - name: copy mount service
      copy:
        src: mounts/home-homeserver-.config.mount
        dest: /etc/systemd/system/
        owner: root
        group: root
        mode: "0444"

    - name: configure mount service
      service:
        name: home-homeserver-.config.mount
        state: started
        enabled: true

- name: Configure pods to run
  block:
    - name: ensure config directory exists
      file:
        path: /etc/kubelet.conf.d
        state: directory

    - name: Copy container configs
      ansible.posix.synchronize:
        src: configs/
        dest: /etc/kubelet.conf.d
        delete: true

    - name: Change config files ownership to be read by any user
      file:
        dest: /etc/kubelet.conf.d
        owner: root
        group: root
        mode: "u=rwX,g=rX,o=rX"
        recurse: true

    - name: Synchronization of src on the control machine to dest on the remote hosts
      ansible.posix.synchronize:
        src: specs/
        dest: /etc/kubelet.d
        delete: true

- name: ensure services are running
  block:
    - name: Start container services
      loop:
        - docker
        - cri-docker.service
      systemd:
        name: "{{ item }}"
        state: started

    - name: Restart Kubelet
      systemd:
        name: "kubelet"
        state: restarted

    - name: wait for kubelet to start
      wait_for: port=10250 timeout=60
